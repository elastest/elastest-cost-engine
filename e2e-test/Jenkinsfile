node('docker') {

   stage('Preparation') {
      
      

      def mycontainer = docker.image('elastest/ci-docker-e2e:latest')
      mycontainer.pull()
      mycontainer.inside("-u jenkins -v /var/run/docker.sock:/var/run/docker.sock:rw -v /dev/shm:/dev/shm") {
         sh '/usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf &'
         git 'https://github.com/elastest/elastest-cost-engine.git'

         stage('ElasTest starting'){
            sh "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock elastest/platform stop" 
            try {
               sh "docker rm -f elastest-platform"
            } catch(e) {
               echo "Error: $e"
            }

            sh "docker run --name elastest-platform -d --rm -v /var/run/docker.sock:/var/run/docker.sock elastest/platform:dev start --mode=experimental-lite"
            sh "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock elastest/platform wait --running=240"
            sh "docker logs elastest-platform"

            containerId= sh (
                script: 'cat /proc/self/cgroup | grep "docker" | sed s/\\\\//\\\\n/g | tail -1',
                returnStdout: true
            ).trim()

            echo "containerId = ${containerId}"
            sh "docker network connect elastest_elastest "+ containerId
	        etmUrl= sh (
                script: 'docker inspect --format=\\"{{.NetworkSettings.Networks.elastest_elastest.Gateway}}\\" elastest_etm-proxy_1',
                returnStdout: true
            ).trim()
            echo "ETM container IP=${etmUrl}"
         }

         stage ("E2E tests") {
            //extra params are sent to java execution
            try {
               sh "cd e2e-test; mvn -B clean test -Duser=elastest -DetmUrl=${etmUrl}"
            } catch(e) {
                sh 'docker ps | awk "{print $NF}" | grep ece | xargs docker logs'
            }
            step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
         }
     }
  }
}

